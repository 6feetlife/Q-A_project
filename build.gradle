plugins {
	id 'org.springframework.boot' version '2.7.0'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
}

javadoc.options.encoding = 'UTF-8'

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation 'org.mapstruct:mapstruct:1.5.1.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.1.Final'

	// jackson 추가
//	implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.0'

	implementation 'com.google.code.gson:gson'
	// 스프링 시큐리티 사용
	implementation 'org.springframework.boot:spring-boot-starter-security'

	// JWT 를 생성, 서명, 검증하는 기능을 제공
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	// JJWT 의 구현체
	implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
	// JSON 파싱 및 변환을 위한 라이브러리
	// payload 데이터를 JSON 으로 변환할때 사용
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'
}

tasks.named('javadoc') {
	source = sourceSets.main.allJava
	options.memberLevel = JavadocMemberLevel.PRIVATE
	destinationDir = file("build/docs/javadoc")
}

test {
    useJUnitPlatform()
}
